// helper: normalize inputs

const toNull = v => (v === '' || v === undefined || v === null ? null : v);
const toIntOrNull = v => {
  if (v === '' || v === undefined || v === null) return null;
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
};
const toDateOrNull = v => {
  if (!v) return null;
  // поддержим 'YYYY-MM-DD' и 'YYYY-MM-DDTHH:mm'
  const dt = new Date(v);
  return isNaN(dt.getTime()) ? null : v; // Postgres сам приведет ISO-строку
};

app.post("/books", async (req, res) => {
  try {
    const { books_name, author, isbn, read_date, rating } = req.body;

    // 1) базовая валидация
    if (!books_name || !books_name.trim()) {
      return res.status(400).send("Title is required");
    }

    // 2) нормализация
    const params = [
      books_name.trim(),
      toNull(author),
      toNull(isbn),
      toDateOrNull(read_date),
      toIntOrNull(rating) // NULL если не число
    ];

    // 3) пробуем минимальную вставку, которая совпадает со схемой
    const sql = `
      INSERT INTO lib_books (books_name, author, isbn, read_date, rating)
      VALUES ($1,$2,$3,$4,$5)
      RETURNING id
    `;

    await db.query(sql, params);
    res.redirect("/");
  } catch (err) {
    // Печатаем максимум полезной диагностики в логи Render
    console.error("POST /books failed");
    console.error("BODY:", req.body);
    console.error("PG code:", err.code, "detail:", err.detail);
    console.error("message:", err.message);
    console.error(err.stack);
    res.status(500).send("Server error while adding a book");
  }
});
